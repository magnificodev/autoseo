services:
    postgres:
        image: postgres:15
        environment:
            POSTGRES_DB: ${POSTGRES_DB:-autoseo}
            POSTGRES_USER: ${POSTGRES_USER:-autoseo}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-autoseo}
        ports:
            - '5432:5432'
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U $$POSTGRES_USER']
            interval: 10s
            timeout: 5s
            retries: 5
        volumes:
            - pgdata:/var/lib/postgresql/data

    redis:
        image: redis:7-alpine
        ports:
            - '6379:6379'

    backend:
        build:
            context: .
            dockerfile: backend/Dockerfile
        environment:
            BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-http://localhost:3000}
        ports:
            - '8000:8000'
        depends_on:
            - postgres
            - redis
        healthcheck:
            test: ['CMD', 'python', '-c', 'import urllib.request,sys; sys.exit(0) if urllib.request.urlopen("http://localhost:8000/health").getcode()==200 else sys.exit(1)']
            start_period: 30s
            interval: 10s
            timeout: 5s
            retries: 5
        restart: unless-stopped

    worker:
        build:
            context: .
            dockerfile: backend/Dockerfile
        command: celery -A src.scheduler.celery_app.app worker --loglevel=INFO
        environment:
            CELERY_BROKER_URL: redis://redis:6379/0
            CELERY_RESULT_BACKEND: redis://redis:6379/1
            BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-http://localhost:3000}
        depends_on:
            - backend
            - redis

    beat:
        build:
            context: .
            dockerfile: backend/Dockerfile
        command: celery -A src.scheduler.celery_app.app beat --loglevel=INFO
        environment:
            CELERY_BROKER_URL: redis://redis:6379/0
            CELERY_RESULT_BACKEND: redis://redis:6379/1
        depends_on:
            - worker

    bot:
        build:
            context: .
            dockerfile: backend/Dockerfile
        command: python -m src.bot.telegram_bot
        env_file:
            - .env
        environment:
            TELEGRAM_TOKEN: ${TELEGRAM_TOKEN:-}
            TELEGRAM_OWNER_ID: ${TELEGRAM_OWNER_ID:-}
            TELEGRAM_ADMINS: ${TELEGRAM_ADMINS:-}
        depends_on:
            backend:
                condition: service_started

    dashboard:
        build:
            context: .
            dockerfile: dashboard/Dockerfile
        environment:
            NEXT_PUBLIC_API_BASE: ${NEXT_PUBLIC_API_BASE:-http://localhost:8000}
        ports:
            - '3000:3000'
        depends_on:
            - backend
        healthcheck:
            test: ['CMD-SHELL', 'wget -qO- http://localhost:3000 >/dev/null 2>&1 || exit 1']
            start_period: 30s
            interval: 10s
            timeout: 5s
            retries: 12
        restart: unless-stopped

    nginx:
        image: nginx:1.25-alpine
        ports:
            - '80:80'
        volumes:
            - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
        depends_on:
            - backend
            - dashboard
        restart: unless-stopped

volumes:
    pgdata:
