#!/usr/bin/env python3
"""
Script ƒë·ªÉ x√≥a t·∫•t c·∫£ test content ƒë√£ t·∫°o
"""

import os
import sys
from datetime import datetime

# Th√™m backend v√†o Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "backend"))

from src.database.models import ContentQueue, Site
from src.database.session import SessionLocal


def delete_test_content():
    """X√≥a t·∫•t c·∫£ test content"""
    db = SessionLocal()
    try:
        # T√¨m t·∫•t c·∫£ content c√≥ title ch·ª©a "Test"
        test_contents = db.query(ContentQueue).filter(
            ContentQueue.title.like("%Test%")
        ).all()
        
        if not test_contents:
            print("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y test content n√†o.")
            return
        
        print(f"üîç T√¨m th·∫•y {len(test_contents)} test content:")
        
        # Hi·ªÉn th·ªã danh s√°ch tr∆∞·ªõc khi x√≥a
        for content in test_contents:
            print(f"  - #{content.id}: {content.title} (status: {content.status})")
        
        # X√°c nh·∫≠n x√≥a
        confirm = input(f"\n‚ùì B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a {len(test_contents)} test content? (y/N): ")
        if confirm.lower() != 'y':
            print("‚ùå ƒê√£ h·ªßy x√≥a.")
            return
        
        # X√≥a t·ª´ng content
        deleted_count = 0
        for content in test_contents:
            db.delete(content)
            deleted_count += 1
        
        db.commit()
        
        print(f"‚úÖ ƒê√£ x√≥a th√†nh c√¥ng {deleted_count} test content.")
        
        # Hi·ªÉn th·ªã th·ªëng k√™ c√≤n l·∫°i
        remaining = db.query(ContentQueue).count()
        print(f"üìä C√≤n l·∫°i {remaining} content trong database.")
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        db.rollback()
    finally:
        db.close()


def delete_all_content():
    """X√≥a T·∫§T C·∫¢ content (nguy hi·ªÉm!)"""
    db = SessionLocal()
    try:
        all_contents = db.query(ContentQueue).all()
        
        if not all_contents:
            print("‚ÑπÔ∏è Kh√¥ng c√≥ content n√†o trong database.")
            return
        
        print(f"‚ö†Ô∏è T√¨m th·∫•y {len(all_contents)} content trong database:")
        
        # Hi·ªÉn th·ªã danh s√°ch
        for content in all_contents:
            print(f"  - #{content.id}: {content.title[:50]}... (status: {content.status})")
        
        # X√°c nh·∫≠n x√≥a
        confirm = input(f"\nüö® C·∫¢NH B√ÅO: B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a T·∫§T C·∫¢ {len(all_contents)} content? (y/N): ")
        if confirm.lower() != 'y':
            print("‚ùå ƒê√£ h·ªßy x√≥a.")
            return
        
        # X√≥a t·∫•t c·∫£
        for content in all_contents:
            db.delete(content)
        
        db.commit()
        print(f"‚úÖ ƒê√£ x√≥a th√†nh c√¥ng {len(all_contents)} content.")
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        db.rollback()
    finally:
        db.close()


if __name__ == "__main__":
    print("üßπ Script x√≥a test content")
    print("1. X√≥a ch·ªâ test content (c√≥ 'Test' trong title)")
    print("2. X√≥a T·∫§T C·∫¢ content (nguy hi·ªÉm!)")
    print("3. Tho√°t")
    
    choice = input("\nCh·ªçn option (1-3): ")
    
    if choice == "1":
        delete_test_content()
    elif choice == "2":
        delete_all_content()
    elif choice == "3":
        print("üëã T·∫°m bi·ªát!")
    else:
        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
