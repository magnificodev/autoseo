name: CD (Staging 40.82.144.18)

on:
    workflow_dispatch:
    push:
        branches: ['main']

jobs:
    deploy:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Python for backend tests
              uses: actions/setup-python@v5
              with:
                  python-version: '3.11'

            - name: Install backend test deps
              working-directory: backend
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install pytest fastapi[all]

            - name: Run backend tests
              working-directory: backend
              env:
                  DATABASE_URL: sqlite:///./test.db
                  BACKEND_CORS_ORIGINS: http://localhost:3000
                  JWT_SECRET: test-secret
              run: pytest -q

            - name: Setup SSH key
              uses: webfactory/ssh-agent@v0.9.0
              with:
                  ssh-private-key: |
                      ${{ secrets.SSH_KEY }}

            - name: Add server to known_hosts
              run: |
                  ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

            - name: Pre-check SSH connectivity (retry)
              run: |
                  set -e
                  for i in $(seq 1 10); do
                    echo "Attempt $i: testing SSH connectivity..."
                    if ssh -o BatchMode=yes -o StrictHostKeyChecking=yes -p 22 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo ok"; then
                      echo "SSH connectivity OK"
                      break
                    fi
                    echo "SSH not ready, wait and retry..."
                    sleep 6
                  done

            - name: Upload repository to server
              uses: appleboy/scp-action@v0.1.7
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USER }}
                  key: ${{ secrets.SSH_KEY }}
                  port: 22
                  source: '.'
                  target: '~/autoseo'
                  strip_components: 0
                  timeout: 120s
                  command_timeout: 30m
                  debug: true

            - name: Remote deploy
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USER }}
                  key: ${{ secrets.SSH_KEY }}
                  port: 22
                  timeout: 120s
                  command_timeout: 40m
                  debug: true
                  script: |
                      set -e
                      cd ~/autoseo

                      # Ensure Docker installed
                      if ! command -v docker >/dev/null 2>&1; then
                        curl -fsSL https://get.docker.com | sh
                        sudo usermod -aG docker $USER || true
                      fi

                      # Ensure docker compose V2
                      if ! docker compose version >/dev/null 2>&1; then
                        DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
                        mkdir -p $DOCKER_CONFIG/cli-plugins
                        curl -SL https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
                        chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
                      fi

                      # Ensure .env exists on server (do not overwrite secrets)
                      if [ ! -f .env ]; then
                        if [ -f .env.example ]; then cp .env.example .env; fi
                      fi

                      # Build and start containers
                      docker compose pull || true
                      docker compose build
                      docker compose up -d

                      # Health checks
                      echo "Waiting for services..."
                      for i in $(seq 1 60); do
                        if curl -sf http://localhost/health && curl -sf http://localhost:3000; then
                          echo "All services healthy"
                          break
                        fi
                        echo "Waiting for services... ($i/60)"
                        sleep 2
                      done
                      echo "Validate connectivity from nginx to dashboard..."
                      if ! docker compose exec -T nginx sh -lc "wget -qO- http://dashboard:3000/ >/dev/null"; then
                        echo "Dashboard not reachable from nginx, restarting services..."
                        docker compose restart dashboard nginx
                        sleep 5
                        docker compose exec -T nginx sh -lc "wget -qO- http://dashboard:3000/ >/dev/null"
                      fi
                      # Alembic migrations with PYTHONPATH and safe fallback
                      docker compose exec -T backend sh -lc "cd /app && PYTHONPATH=/app alembic upgrade head || (PYTHONPATH=/app alembic stamp head && PYTHONPATH=/app alembic upgrade head)"
